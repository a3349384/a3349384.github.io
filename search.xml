<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[记位移运算]]></title>
      <url>https://a3349384.github.io/2016/11/17/%E8%AE%B0%E4%BD%8D%E7%A7%BB%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>a &lt;&lt; b = a * 2^b</p>
<p>a &gt;&gt; b = a / 2^b</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用Transition修改Activity启动和关闭动画]]></title>
      <url>https://a3349384.github.io/2016/11/01/%E4%BD%BF%E7%94%A8Transition%E4%BF%AE%E6%94%B9Activity%E5%90%AF%E5%8A%A8%E5%92%8C%E5%85%B3%E9%97%AD%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<p>通常我们通过：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivity(intent)</div></pre></td></tr></table></figure>
<p>打开一个新的Activity，这个Activity打开时伴随着Android默认的过渡动画。</p>
<p>通过如下代码，我们便进入了“场景动画”大门的第一步：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivity(intent, ActivityOptions.makeSceneTransitionAnimation(MainActivity.this).toBundle());</div></pre></td></tr></table></figure>
<p>不需要做任何其他的事情，当使用上面的代码打开一个Activity时，这个Activity的过渡动画已经变为<strong>渐变式动画</strong>（在Android M上的测试结果）。</p>
<p>如果我们想修改过渡动画为其他的类型，该怎么做呢？</p>
<p>Window中有这样一个方法帮助我们设置过渡动画：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void setEnterTransition(Transition transition) &#123;&#125;</div></pre></td></tr></table></figure>
<p>我们只需要传入相关的Transition，即可修改Activity打开时的过渡动画。</p>
<p>Android中内置如下几种Transition帮助开发者实现常见的过渡动画：</p>
<p><img src="http://a3349384.github.io/uploads/android_transition_2016_11_01.png" alt="image"></p>
<p>接下来，我们使用内置的“<strong>Slide</strong>”Transition作为Activity的过度动画。</p>
<blockquote>
<p>设置Transition</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class TransitionActivity extends AppCompatActivity</div><div class="line">&#123;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState)</div><div class="line">    &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        getWindow().setEnterTransition(new Slide());</div><div class="line">        setContentView(R.layout.activity_transition);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下图所示：<br><img src="http://a3349384.github.io/uploads/android_transition_2016_11_01.gif" alt="image"></p>
<p>有没有发现这个过渡动画和普通过渡动画的不同之处？没错，，，我也不知道怎么描述，反正大家自己心里明白就行。下面我们着重分析下这样的效果究竟是如何实现的。</p>
<p>看一看Slide的构造函数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public Slide() </div><div class="line">&#123;</div><div class="line">	setSlideEdge(Gravity.BOTTOM);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认其Gravity为Bottom,所以我们看到的过渡动画是从下往上的。</p>
<p>然后，遍历每一个View（<em>注1</em>），计算View动画开始和结束的位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">private void captureHierarchy(View view, boolean start)</div><div class="line">&#123;</div><div class="line">    if (view == null)</div><div class="line">    &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    //...</div><div class="line">    if (view.getParent() instanceof ViewGroup)</div><div class="line">    &#123;</div><div class="line">        TransitionValues values = new TransitionValues();</div><div class="line">        values.view = view;</div><div class="line">        if (start)</div><div class="line">        &#123;</div><div class="line">            captureStartValues(values);</div><div class="line">        &#125;</div><div class="line">        else</div><div class="line">        &#123;</div><div class="line">            captureEndValues(values);</div><div class="line">        &#125;</div><div class="line">        //...</div><div class="line">    &#125;</div><div class="line">    if (view instanceof ViewGroup)</div><div class="line">    &#123;</div><div class="line">        //...</div><div class="line">        ViewGroup parent = (ViewGroup) view;</div><div class="line">        for (int i = 0; i &lt; parent.getChildCount(); ++i)</div><div class="line">        &#123;</div><div class="line">            captureHierarchy(parent.getChildAt(i), start);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，对于每一个View(<em>注1</em>)，在其appear、disappear时，执行Transition动画：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public Animator onAppear(ViewGroup sceneRoot, View view,</div><div class="line">        TransitionValues startValues, TransitionValues endValues) &#123;</div><div class="line">    if (endValues == null) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    int[] position = (int[]) endValues.values.get(PROPNAME_SCREEN_POSITION);</div><div class="line">    float endX = view.getTranslationX();</div><div class="line">    float endY = view.getTranslationY();</div><div class="line">    float startX = mSlideCalculator.getGoneX(sceneRoot, view);</div><div class="line">    float startY = mSlideCalculator.getGoneY(sceneRoot, view);</div><div class="line">    return TranslationAnimationCreator</div><div class="line">            .createAnimation(view, endValues, position[0], position[1],</div><div class="line">                    startX, startY, endX, endY, sDecelerate, this);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public Animator onDisappear(ViewGroup sceneRoot, View view,</div><div class="line">        TransitionValues startValues, TransitionValues endValues) &#123;</div><div class="line">    if (startValues == null) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    int[] position = (int[]) startValues.values.get(PROPNAME_SCREEN_POSITION);</div><div class="line">    float startX = view.getTranslationX();</div><div class="line">    float startY = view.getTranslationY();</div><div class="line">    float endX = mSlideCalculator.getGoneX(sceneRoot, view);</div><div class="line">    float endY = mSlideCalculator.getGoneY(sceneRoot, view);</div><div class="line">    return TranslationAnimationCreator</div><div class="line">            .createAnimation(view, startValues, position[0], position[1],</div><div class="line">                    startX, startY, endX, endY, sAccelerate, this);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大致就这样，一个Slide动画就产生了。</p>
<p><em>注1</em>：实际上不是每一个View，官方文档中写道：</p>
<blockquote>
<p>The entering Views will be those that are regular Views or ViewGroups that have isTransitionGroup() return true. </p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用windowAnimationStyle修改Activity启动和关闭动画]]></title>
      <url>https://a3349384.github.io/2016/11/01/%E4%BD%BF%E7%94%A8windowAnimationStyle%E4%BF%AE%E6%94%B9Activity%E5%90%AF%E5%8A%A8%E5%92%8C%E5%85%B3%E9%97%AD%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<h5 id="首先，定义一个Style"><a href="#首先，定义一个Style" class="headerlink" title="首先，定义一个Style:"></a>首先，定义一个Style:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;activityAnim&quot;&gt;</div><div class="line">    &lt;item name=&quot;android:activityOpenEnterAnimation&quot;&gt;@anim/scale_up&lt;/item&gt;</div><div class="line">    &lt;item name=&quot;android:activityCloseExitAnimation&quot;&gt;@anim/scale_down&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>其中：activityOpenEnterAnimation定义于<strong>即将打开的Activity的动画</strong>；</p>
<p>其中：activityCloseExitAnimation定义<strong>当前Activity关闭的动画</strong>。</p>
<p>另外还有两个比较少用的attr:<br>activityOpenExitAnimation和activityCloseEnterAnimation，具体用法可Google。</p>
<p>接下来声明两个动画，一个放大，一个缩小：</p>
<blockquote>
<p>scale_up.xml</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">     android:shareInterpolator=&quot;false&quot;</div><div class="line">     android:zAdjustment=&quot;top&quot;&gt;</div><div class="line">    &lt;scale</div><div class="line">        android:fromXScale=&quot;0&quot;</div><div class="line">        android:toXScale=&quot;1.0&quot;</div><div class="line">        android:fromYScale=&quot;0&quot;</div><div class="line">        android:toYScale=&quot;1.0&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot;</div><div class="line">        android:duration=&quot;300&quot;/&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>scale_down.xml</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">     android:shareInterpolator=&quot;false&quot;</div><div class="line">     android:zAdjustment=&quot;top&quot;&gt;</div><div class="line">    &lt;scale</div><div class="line">        android:fromXScale=&quot;1.0&quot;</div><div class="line">        android:toXScale=&quot;0&quot;</div><div class="line">        android:fromYScale=&quot;1.0&quot;</div><div class="line">        android:toYScale=&quot;0&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot;</div><div class="line">        android:duration=&quot;300&quot;/&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<p>然后设置Activity的Theme:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style name=&quot;activityTheme&quot; parent=&quot;你自己的Theme&quot;&gt;</div><div class="line">    &lt;item name=&quot;android:windowAnimationStyle&quot;&gt;@style/activityAnim&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=&quot;.MainActivity&quot;</div><div class="line">    android:theme=&quot;@style/activityTheme&quot;&gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</div><div class="line"></div><div class="line">        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div><div class="line">&lt;activity android:name=&quot;.SecondActivity&quot;</div><div class="line">    android:theme=&quot;@style/activityTheme&quot;/&gt;</div></pre></td></tr></table></figure>
<p>也可以直接设置Application的Theme，如果设置Application的Theme，则所有Activity都是应用这些动画。</p>
<p>通过以上设置后，我们可以看到：SecondActivity打开时，会产生一个放大的动画；当SecondActivity关闭时，会产生一个缩小的动画。<br><img src="https://a3349384.github.io/uploads/activity_animation_scale_2016_11_01.gif" alt="image"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用overridePendingTransition修改Activity启动和关闭动画]]></title>
      <url>https://a3349384.github.io/2016/11/01/%E4%BD%BF%E7%94%A8overridePendingTransition%E4%BF%AE%E6%94%B9Activity%E5%90%AF%E5%8A%A8%E5%92%8C%E5%85%B3%E9%97%AD%E5%8A%A8%E7%94%BB/</url>
      <content type="html"><![CDATA[<h5 id="overridePendingTransition方法签名："><a href="#overridePendingTransition方法签名：" class="headerlink" title="overridePendingTransition方法签名："></a>overridePendingTransition方法签名：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void overridePendingTransition(int enterAnim, int exitAnim)</div></pre></td></tr></table></figure>
<p>其中enterAnim<strong>用于即将打开的Activity</strong>；</p>
<p>其中exitAnim<strong>用于当前调用overridePendingTransition的Activity</strong>。</p>
<h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><p>首先声明两个动画，一个放大，一个缩小：</p>
<blockquote>
<p>scale_up.xml</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">     android:shareInterpolator=&quot;false&quot;</div><div class="line">     android:zAdjustment=&quot;top&quot;&gt;</div><div class="line">    &lt;scale</div><div class="line">        android:fromXScale=&quot;0&quot;</div><div class="line">        android:toXScale=&quot;1.0&quot;</div><div class="line">        android:fromYScale=&quot;0&quot;</div><div class="line">        android:toYScale=&quot;1.0&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot;</div><div class="line">        android:duration=&quot;300&quot;/&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>scale_down.xml</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">     android:shareInterpolator=&quot;false&quot;</div><div class="line">     android:zAdjustment=&quot;top&quot;&gt;</div><div class="line">    &lt;scale</div><div class="line">        android:fromXScale=&quot;1.0&quot;</div><div class="line">        android:toXScale=&quot;0&quot;</div><div class="line">        android:fromYScale=&quot;1.0&quot;</div><div class="line">        android:toYScale=&quot;0&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot;</div><div class="line">        android:duration=&quot;300&quot;/&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure>
<p>如果我们希望新打开的Activity展示从小到大的动画，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(MainActivity.this, SecondActivity.class);</div><div class="line">startActivity(intent);</div><div class="line">overridePendingTransition(R.anim.scale_up, 0);</div></pre></td></tr></table></figure>
<p>exitAnim传递0表示当前Activity不做什么动画。</p>
<p>如果我们希望当前Activity退出时展示从大到小的动画，可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void finish()</div><div class="line">&#123;</div><div class="line">    super.finish();</div><div class="line">    overridePendingTransition(0, R.anim.scale_down);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[仿SwipeRefreshLayout下拉加载更多]]></title>
      <url>https://a3349384.github.io/2016/08/09/%E4%BB%BFSwipeRefreshLayout%E4%B8%8B%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/</url>
      <content type="html"><![CDATA[<h1 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h1><p><img src="https://github.com/a3349384/SwipeTopBottomLayout/blob/master/GIF_20160808_150714.gif?raw=true" alt="image"></p>
<p><a href="https://github.com/a3349384/SwipeTopBottomLayout" target="_blank" rel="external">Show on GitHub</a></p>
<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        maven &#123; url &quot;https://jitpack.io&quot; &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.github.a3349384:SwipeTopBottomLayout:-SNAPSHOT&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><h2 id="设置下拉刷新监听器："><a href="#设置下拉刷新监听器：" class="headerlink" title="设置下拉刷新监听器："></a>设置下拉刷新监听器：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setOnRefreshListener();</div></pre></td></tr></table></figure>
<h2 id="设置上拉加载更多监听器："><a href="#设置上拉加载更多监听器：" class="headerlink" title="设置上拉加载更多监听器："></a>设置上拉加载更多监听器：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setOnLoadMoreListener();</div></pre></td></tr></table></figure>
<h2 id="下拉刷新完成："><a href="#下拉刷新完成：" class="headerlink" title="下拉刷新完成："></a>下拉刷新完成：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setRefreshing(false);</div></pre></td></tr></table></figure>
<h2 id="上拉加载更多完成："><a href="#上拉加载更多完成：" class="headerlink" title="上拉加载更多完成："></a>上拉加载更多完成：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setLoadingMore(false);</div></pre></td></tr></table></figure>
<p>可以主动调用显示刷新、加载更多动画：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setRefreshing(true);</div><div class="line">setLoadingMore(true);</div></pre></td></tr></table></figure>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>1、SwipeTopButtomRefresh中应只放一个Child View，并且该Child View必须实现了“NestedScrollingChild”接口。对于非“NestedScrollingChild”类型的Child，用SwipeRefreshLayout足以满足要求。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://a3349384.github.io/2016/07/26/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
